var m=Object.defineProperty;var h=(i,t,e)=>t in i?m(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var l=(i,t,e)=>h(i,typeof t!="symbol"?t+"":t,e);import{a as p}from"./index-DHr9lByg.js";import{S as d}from"./index-3p_sB7V1.js";const u="98b0d204727b11f0bf8eeed892cd7f54";var f=(i=>(i.PENDING="pending",i.SUCCESS="success",i.ERROR="error",i.IN_PROGRESS="in_progress",i))(f||{});class g{constructor(){l(this,"client");l(this,"retrievalCache",new Map);l(this,"CACHE_DURATION",5*60*1e3);this.client=p.create({baseURL:d.ragflow.baseURL,timeout:d.ragflow.timeout,headers:{Authorization:`Bearer ${d.ragflow.apiKey}`,"Content-Type":"application/json"}}),this.client.interceptors.request.use(t=>{var e;return console.log(`[RAGFLOW] ${(e=t.method)==null?void 0:e.toUpperCase()} ${t.url}`),t},t=>(console.error("[RAGFLOW] Request error:",t),Promise.reject(t))),this.client.interceptors.response.use(t=>(console.log("[RAGFLOW] Response:",t.data),t),t=>{var e;return console.error("[RAGFLOW] Response error:",((e=t.response)==null?void 0:e.data)||t.message),Promise.reject(this.handleError(t))})}handleError(t){var e;if((e=t.response)!=null&&e.data){const a=t.response.data;return new Error(a.message||`API Error: ${t.response.status}`)}return new Error(t.message||"Network error")}async withRetry(t,e=d.app.retryAttempts,a=d.app.retryDelay){let r;for(let s=1;s<=e;s++)try{return await t()}catch(n){if(r=n,console.warn(`[RAGFLOW] Attempt ${s}/${e} failed:`,n),s===e)break;const o=a*Math.pow(2,s-1);await new Promise(c=>setTimeout(c,o))}throw r}async uploadAndParseDocument(t,e,a){try{e==null||e(0,"开始上传文件...");const r=await this.uploadDocumentToDataset(t,e);if(r.status!=="success")return{status:r.status,message:r.message,error:r.error};const s=r.data.id,n=r.data.name;e==null||e(80,"配置文档解析参数...");const o=await this.updateDocumentConfiguration(s,n);if(o.status!=="success")return{status:"error",message:"配置文档参数失败",error:o.error};e==null||e(90,"启动文档解析..."),a==null||a(0,"开始解析文档内容...");const c=await this.startDocumentParsing(s,a);return c.status!=="success"?{status:c.status,message:c.message,error:c.error}:(e==null||e(100,"文件上传和解析完成"),{status:"success",message:"文件上传和解析成功完成",data:{documentId:s,fileName:n}})}catch(r){return console.error("[RAGFLOW] Upload and parse failed:",r),{status:"error",message:"文件上传和解析过程中发生错误",error:r.message}}}async uploadDocumentToDataset(t,e){try{e==null||e(10,`正在上传文件: ${t.name}`);const a=new FormData;a.append("file",t);const r=await this.client.post(`/api/v1/datasets/${u}/documents`,a,{headers:{"Content-Type":"multipart/form-data"},timeout:12e4,onUploadProgress:n=>{if(n.total){const o=Math.round(n.loaded*70/n.total)+10;e==null||e(o,`上传进度: ${o}%`)}}});if(r.data.code!==0)return{status:"error",message:"文件上传失败",error:r.data.message||"Upload failed"};if(!r.data.data||r.data.data.length===0)return{status:"error",message:"上传响应数据异常",error:"No document returned from upload"};const s=r.data.data[0];return e==null||e(80,`文件上传成功: ${s.name}`),{status:"success",message:"文件上传成功",data:s}}catch(a){return console.error("[RAGFLOW] Upload failed:",a),{status:"error",message:"文件上传失败",error:a.message}}}async updateDocumentConfiguration(t,e){try{const{chunkMethod:a,parserConfig:r}=this.getConfigForFile(e),s={chunk_method:a,parser_config:r};console.log("[RAGFLOW] Updating document config for",e,":",s);const n=await this.client.put(`/api/v1/datasets/${u}/documents/${t}`,s);return n.data.code!==0?{status:"error",message:"更新文档配置失败",error:n.data.message||"Failed to update document config"}:{status:"success",message:`文档配置更新成功: ${this.isPdfFile(e)?"PDF(DeepDoc+分页)":this.isWordFile(e)?"Word(Book)":"Book"}`}}catch(a){return console.error("[RAGFLOW] Config update failed:",a),{status:"error",message:"更新文档配置失败",error:a.message}}}async startDocumentParsing(t,e){try{const a=await this.client.post(`/api/v1/datasets/${u}/chunks`,{document_ids:[t]});return a.data.code!==0?{status:"error",message:"启动文档解析失败",error:a.data.message||"Failed to start parsing"}:(e==null||e(10,"解析任务已提交，开始处理..."),await this.monitorParsingProgress(t,e))}catch(a){return console.error("[RAGFLOW] Parse start failed:",a),{status:"error",message:"启动文档解析失败",error:a.message}}}async monitorParsingProgress(t,e){const s=Date.now();let n=0;for(;Date.now()-s<3e5;)try{const o=await this.checkDocumentParsingStatus(t);if(o.progress>n){n=o.progress;const c=this.getParsingStage(o.progress);e==null||e(o.progress,`解析进度: ${Math.round(o.progress)}%`,c)}if(o.status==="DONE"||o.status==="1")return e==null||e(100,`解析完成！共生成 ${o.chunkCount} 个文档片段`),{status:"success",message:`文档解析完成，生成 ${o.chunkCount} 个片段`};if(o.status==="FAIL"||o.status==="-1")return{status:"error",message:"文档解析失败",error:"解析过程中发生错误，请检查文档格式"};await new Promise(c=>setTimeout(c,3e3))}catch(o){return console.error("[RAGFLOW] Progress check failed:",o),{status:"error",message:"监控解析进度失败",error:o.message}}return{status:"error",message:"文档解析超时",error:"解析时间超过5分钟，请重试或联系管理员"}}getParsingStage(t){return t<20?"OCR识别":t<40?"布局分析":t<60?"表格分析":t<80?"文本提取":t<95?"生成片段":"索引构建"}async retrieveContent(t,e){const a=`${t}:${e}`,r=this.retrievalCache.get(a);return r&&Date.now()-r.timestamp<this.CACHE_DURATION?(console.log("[RAGFLOW] Using cached retrieval result"),r.result):this.withRetry(async()=>{const s={question:e,dataset_ids:[t],similarity_threshold:d.ragflow.defaultSimilarityThreshold,top_k:10},n=await this.client.post("/api/v1/retrieval",s);if(n.data.code!==0)throw new Error(n.data.message||"Failed to retrieve content");const o=n.data.data;return this.retrievalCache.set(a,{result:o,timestamp:Date.now()}),o})}async generateOutlineStages(t,e){const a=d.outlinePrompts.map(r=>({...r,result:"",status:"pending"}));for(let r=0;r<a.length;r++){const s=a[r];try{s.status="processing",s.startTime=Date.now(),e==null||e(s);const n=await this.retrieveContent(t,s.prompt);s.result=this.formatRetrievalResult(n),s.status="completed",s.endTime=Date.now(),e==null||e(s),console.log(`[RAGFLOW] Stage ${s.id} completed:`,s.result.substring(0,200)+"...")}catch(n){throw s.status="error",s.error=n.message,s.endTime=Date.now(),e==null||e(s),console.error(`[RAGFLOW] Stage ${s.id} failed:`,n),n}}return a}formatRetrievalResult(t){return!t.chunks||t.chunks.length===0?"未找到相关内容":t.chunks.sort((e,a)=>a.similarity-e.similarity).slice(0,5).map((e,a)=>`${a+1}. ${e.content}`).join(`

`)}clearRetrievalCache(){this.retrievalCache.clear(),console.log("[RAGFLOW] Retrieval cache cleared")}getCacheStats(){return{size:this.retrievalCache.size,keys:Array.from(this.retrievalCache.keys())}}validateParserConfig(t){const e={raptor:t.raptor??{use_raptor:!1}};return console.log("[RAGFLOW] Validated parser config for dataset creation (book method):",e),e}async createDatasetWithValidatedConfig(t,e){return this.withRetry(async()=>{const a={...d.ragflow.defaultParserConfig},r=e?{...a,...e}:a,s=this.validateParserConfig(r),n={name:t,chunk_method:"book",parser_config:s};console.log("[RAGFLOW] Creating dataset with validated config:",n);const o=await this.client.post("/api/v1/datasets",n);if(o.data.code!==0)throw new Error(o.data.message||"Failed to create dataset");return o.data.data})}async checkDocumentParsingStatus(t){const e=await this.client.get(`/api/v1/datasets/${u}/documents?id=${t}`);if(e.data.code!==0)throw new Error(e.data.message||"Failed to check document status");const a=e.data.data.docs[0];if(!a)throw new Error("Document not found");return{status:a.run||"UNSTART",progress:a.progress||0,chunkCount:a.chunk_count||0}}isPdfFile(t){return t.toLowerCase().endsWith(".pdf")}isWordFile(t){return/\.(doc|docx)$/i.test(t.toLowerCase())}getConfigForFile(t){return this.isPdfFile(t)?{chunkMethod:"book",parserConfig:{layout_recognize:"DeepDoc",task_page_size:12,raptor:{use_raptor:!1}}}:this.isWordFile(t)?{chunkMethod:"book",parserConfig:{raptor:{use_raptor:!1}}}:{chunkMethod:"book",parserConfig:{raptor:{use_raptor:!1}}}}async updateDocumentParserConfig(t,e,a){return this.withRetry(async()=>{const{chunkMethod:r,parserConfig:s}=this.getConfigForFile(a),n={chunk_method:r,parser_config:s};console.log("[RAGFLOW] Updating document config for",a,":",n);const o=await this.client.put(`/api/v1/datasets/${t}/documents/${e}`,n);if(o.data.code!==0)throw new Error(o.data.message||"Failed to update document parser config");this.isPdfFile(a)?console.log("[RAGFLOW] PDF document updated: chunk_method=book, layout_recognize=DeepDoc, task_page_size=12"):this.isWordFile(a)?console.log("[RAGFLOW] Word document updated: chunk_method=book"):console.log("[RAGFLOW] Document updated with book method")})}async getDocuments(t=1,e=30){try{const a=await this.client.get(`/api/v1/datasets/${u}/documents?page=${t}&page_size=${e}`);return a.data.code!==0?{status:"error",message:"获取文档列表失败",error:a.data.message||"Failed to get documents"}:{status:"success",message:"获取文档列表成功",data:{documents:a.data.data.docs,total:a.data.data.total}}}catch(a){return{status:"error",message:"获取文档列表失败",error:a.message}}}async deleteDocument(t){try{const e=await this.client.delete(`/api/v1/datasets/${u}/documents`,{data:{ids:[t]}});return e.data.code!==0?{status:"error",message:"删除文档失败",error:e.data.message||"Failed to delete document"}:{status:"success",message:"文档删除成功"}}catch(e){return{status:"error",message:"删除文档失败",error:e.message}}}async retrieveFromFixedDataset(t){try{return{status:"success",message:"内容检索成功",data:await this.retrieveContent(u,t)}}catch(e){return{status:"error",message:"内容检索失败",error:e.message}}}getFixedDatasetId(){return u}async createDataset(t){return console.warn("createDataset is deprecated, using fixed dataset instead"),{id:u,name:t}}async uploadDocument(t,e){console.warn("uploadDocument is deprecated, use uploadAndParseDocument instead");const a=await this.uploadDocumentToDataset(e);if(a.status==="success")return a.data;throw new Error(a.message)}async parseDocument(t,e){console.warn("parseDocument is deprecated, parsing is handled automatically")}async getDatasets(t=1,e=30){return console.warn("getDatasets is deprecated"),{datasets:[],total:0}}async deleteDataset(t){console.warn("deleteDataset is deprecated")}async waitForDocumentParsing(t,e,a,r){console.warn("waitForDocumentParsing is deprecated, use uploadAndParseDocument instead")}async retryDocumentParsing(t,e){console.warn("retryDocumentParsing is deprecated")}async getParsingNotification(t,e){return console.warn("getParsingNotification is deprecated"),{isCompleted:!0,progress:100,message:"Deprecated method",chunkCount:0}}}const F=new g;export{f as O,F as r};
